{
	order grpc_web before reverse_proxy
	order rate_limit before basicauth
	order replace after encode # https://github.com/caddyserver/replace-response

	# to see logs - 
	# tail -100f /var/log/caddy/access.log | while read -r line; do echo -e "$line"; done
	log http.log.access {
		include http.log.access
		output file /var/log/caddy/access.log
		format formatted "\e[97m{status}\e[0m | \e[35m[{ts}]\e[0m \e[96m\e[1m{request>remote_ip}\e[0m \e[31m{request>headers>X-Forwarded-For}\e[0m \e[33m{request>method}\e[0m \e[92m{request>host}\e[32m{request>uri}\e[0m \e[34m{request>headers>Origin}\e[0m \e[39m{request>headers>X-Api-Key}\e[0m" {
				time_format "02/Jan/2006:15:04:05"
		}
	}
	log {
		exclude http.log.access
		output file /var/log/caddy/caddy.log
		format json
	}
}

:16123 {
	status 200 /
}

(sla) {
		expression \
		{% for origin in sla_domains %}
			{header.ORIGIN} == '{{ origin }}' || \
		{% endfor %}
		{% for key in sla_keys %}
			{header.X-Api-Key} == '{{ key }}' || \
		{% endfor %}
		{% for allowed in sla %}
			{% if allowed is iterable and (allowed is not string and allowed is not mapping) %}
				{% for allowed_ip in allowed %}
			{header.X-FORWARDED-FOR} == '{{ allowed_ip }}' || \
				{% endfor %}
			{% else  %}
			{header.X-FORWARDED-FOR} == '{{ allowed_ip }}' || \
			{% endif  %}
		{% endfor %}
	{% for ip in groups['ip_list'] %}
		{header.X-FORWARDED-FOR} == '{{ ip }}' || \
	{% endfor %}
		{header.X-FORWARDED-FOR} == '50.53.247.222'
}

(whitelist) {
	expression \
	{% for origin in whitelist_domains %}
		{header.ORIGIN} == '{{ origin }}' || \
	{% endfor %}
	{% for key in whitelist_keys %}
		{header.X-Api-Key} == '{{ key }}' || \
	{% endfor %}
	{% for allowed in white_list %}
	{% if allowed is iterable and (allowed is not string and allowed is not mapping) %}
		{% for allowed_ip in allowed %}
	{header.X-FORWARDED-FOR} == '{{ allowed_ip }}' || \
		{% endfor %}
	{% else  %}
	{header.X-FORWARDED-FOR} == '{{ allowed_ip }}' || \
	{% endif  %}
{% endfor %}
{header.X-FORWARDED-FOR} == '65.109.135.253'
}

(slas) {
	@sla {
		import sla
	}
}

(whitelists) {
	@whitelist {
		import whitelist
	}
}

(public-rate-limit) {
	rate_limit {remote.ip} 60r/m
	rate_limit {header.X-FORWARDED-FOR} 60r/m
	rate_limit {path.*} 60r/m
	rate_limit {path} 60r/m

	rate_limit {remote.ip} 2r/s
	rate_limit {header.X-FORWARDED-FOR} 2r/s
	rate_limit {path.*} 2r/s
	rate_limit {path} 2r/s
}

(rate-limiter) {
	# documentation for rate_limit: https://caddyserver.com/docs/modules/http.handlers.rate_limit
	# documentation for xcaddy install: https://github.com/caddyserver/xcaddy#install

	@filter {
		not {
			import sla
			import whitelist
		}
	}

	handle @filter {
		handle_path /cosmos/staking/v1beta1/validators/*/delegations* {
			respond 404
		}
		import public-rate-limit
	}
}

(rpc-header) {
	header {
		Access-Control-Allow-Methods "POST, GET, OPTIONS"
		Access-Control-Allow-Headers "*"
		Access-Control-Allow-Origin "*"
		Access-Control-Max-Age 86400
		Cache-Control no-cache
		Pragma no-cache
		-Server
	}
}

(grpc-body) {
	transport http {
		versions h2c 2
		dial_timeout 3s
	}
}

(lb-grpc) {
	lb_policy round_robin
	  lb_retries 2
	  lb_try_duration 5s
}

(lb-config) {
  lb_policy round_robin
    lb_retries 2
  health_uri /cosmos/base/tendermint/v1beta1/syncing
    health_port {args[0]}
    health_interval 5m
    health_timeout 5s
    health_status 2xx
    health_body syncing"\s*:\s*false
}

(blocked) {
# checks for blocked IPs and re-directs them to 403
	@blocked_agents {
		header User-Agent SubQuery-Node
	}
	respond @blocked_agents "<h1>Access Denied</h1>" 403
	
	@blocked_other {
		expression \
		{header.X-FORWARDED-FOR}.contains('18.156.158.53') || \
		{header.ORIGIN}.contains("autostake.com")
	}
	respond @blocked_other "<h1>Access Denied</h1>" 403

	@blocked_ips {
		remote_ip forwarded {{ blocked_list }}
	}
	respond @blocked_ips "<h1>Access Denied</h1>" 403
}

(regex) {
	replace {
		re ",\s*\"validator_info\"\s*:\s*{[^}]*},\s*\"[^}]*}" ""
		re "\s*\"listen_addr\"\s*:\s*\"[^\"]*\"," ""
	}
}

(netinfo-regex) {
	replace {
			re "\"listeners\":\s*\[([^\]]+)\]," ""
	}
}

handle_errors {
	respond "{err.status_code} {err.status_text}"
}

:80 {
	root * /usr/share/caddy
	file_server
}

import /etc/caddy/networks/*.caddy
